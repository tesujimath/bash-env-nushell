#!/usr/bin/env bash
#
# Copyright 2023 Simon Guest
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, subl# icense, and/or sell copies of the
# Software, and to permit persons to whom the Software is furnished to
# do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


function send_encoder() {
    echo -en "\04json"
}

function send_signature() {
    jq -c <<EOF
{
  "Signature": [
    {
    "sig": {
      "name": "bash-env",
      "usage": "get environment variables from a Bash environment file",
      "extra_usage": "",
      "search_terms": [],
      "required_positional": [],
      "optional_positional": [
        {
            "name": "path",
            "desc": "path to environment file",
            "shape": "String",
            "var_id": null,
            "default_value": null
        }
      ],
      "rest_positional": null,
      "vectorizes_over_list": false,
      "named": [],
      "input_output_types": [ [ "Nothing", "Any" ], [ "String", "Any" ] ],
      "allow_variants_without_examples": true,
      "is_filter": false,
      "creates_scope": false,
      "allows_unknown_args":false,
      "category":"Env"
    },
    "examples": []
  }
  ]
}
EOF
}

function send_environment() {
    local _n_env _head _tail _name
    _n_env=$#

    _head="$1"
    shift
    _tail="$@"

    # header
    echo -n '{"Value":{"Record":{"val":{"cols":['

    # names
    if test $_n_env -gt 0; then
        echo -n "\"$_head\""

        for _name in $_tail; do
            echo -n ",\"$_name\""
        done
    fi

    # terminate names, start values
    echo -n '],"vals":['

    # values
    if test $_n_env -gt 0; then
        echo -n '{"String":{"val":'
        echo ${!_head} | jq -R
        echo -n ',"internal_span":{"start":0,"end":0}}}'

        for _name in $_tail; do
            if test -v $_name; then
                echo -n ',{"String":{"val":'
                echo ${!_name} | jq -R
                echo -n ',"internal_span":{"start":0,"end":0}}}'
            else
                # unset, TODO
                :
            fi
        done
    fi

    # trailer
    echo ']},"internal_span":{"start":0,"end":0}}}}'
}

function send_error() {
    jq -c <<EOF
{
  "Error": {
    "label": "bash-env",
    "msg": "$1",
    "internal_span": {
      "start": 0,
      "end": 0
    }
  }
}
EOF
}

function eval_and_send_environment() {
    local _source _name _value _env_old _env_new _env_changed_or_unset
    # Nushell may pass through ~ verbatim which we must cope with explicitly
    read _source;

    # get previous env
    declare -A _env_old
    while IFS='=' read -r -d '' _name _value; do
        _env_old[$_name]="${_value@Q}"
    done < <(env -0)

    if eval "$_source"; then
        # get new environment
        declare -A _env_new
        while IFS='=' read -r -d '' _name _value; do
            _env_new[$_name]="${_value@Q}"
        done < <(env -0)

        # determine what changed or became unset
        declare -a _env_changed_or_unset

        # changes
        for _name in "${!_env_new[@]}"; do
            if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
                _env_changed_or_unset+=($_name)
            fi
        done

        # unset
        for _name in "${!_env_old[@]}"; do
            if test ! -v $_name; then
                _env_changed_or_unset+=($_name)
            fi
        done

        send_environment ${_env_changed_or_unset[@]} | jq -c

    else
        send_error "failed to load environment from stdin"
    fi
}

function source_and_send_environment() {
    local _path _name _value _env_old _env_new _env_changed_or_unset
    # Nushell may pass through ~ verbatim which we must cope with explicitly
    _path="${1/#\~/$HOME}"

    if test ! -r "$_path"; then
        send_error "no such file '$_path'"
        return
    fi

    # get previous env
    declare -A _env_old
    while IFS='=' read -r -d '' _name _value; do
        _env_old[$_name]="${_value@Q}"
    done < <(env -0)

    if source "$_path"; then

        # get new environment
        declare -A _env_new
        while IFS='=' read -r -d '' _name _value; do
            _env_new[$_name]="${_value@Q}"
        done < <(env -0)

        # determine what changed or became unset
        declare -a _env_changed_or_unset

        # changes
        for _name in "${!_env_new[@]}"; do
            if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
                _env_changed_or_unset+=($_name)
            fi
        done

        # unset
        for _name in "${!_env_old[@]}"; do
            if test ! -v $_name; then
                _env_changed_or_unset+=($_name)
            fi
        done

        send_environment ${_env_changed_or_unset[@]} | jq -c

    else
        send_error "failed to load environment from '$_path'"
    fi
}

function run_as_plugin() {
    local _path
    send_encoder

    while true; do
        read -rs line

        # blank line handling
        if test -z "$line"; then
            break
        fi

        case "$line" in
            *Signature*)
                send_signature
                ;;
            *CallInfo*)
                echo "pos" $line >> /home/fazbdillah/debug.txt
                _path=$(echo $line | jq -r '.CallInfo.call.positional[0].String.val')
                _stdinval=$(echo $line | jq -r '.CallInfo.input.Value.String.val')
                echo "path" $_path $(echo ${#_path}) >> /home/fazbdillah/debug.txt
                echo "stdin" $_stdinval $(echo ${#_stdinval}) >> /home/fazbdillah/debug.txt
                if [[ "$_stdinval" != "null" ]]; then
                    echo "eval the input!" >> /home/fazbdillah/debug.txt
                    echo $_stdinval | eval_and_send_environment
                elif [[ "$_path" != "null" ]]; then
                    echo "source the path!" >> /home/fazbdillah/debug.txt
                    source_and_send_environment "$_path"
                fi;
                ;;
        esac
    done
}

if test $# -eq 0; then
    run_as_plugin
elif test "$1" == "--to-json" && test -n "$2"; then
    source_and_send_environment "$2"
else
    echo "usage: nu_plugin_bash_env [--to-json <env-file>]"
fi
